{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}

<h1>Introduktion</h1>
<p>
    Codestyle - är hur koden ser ut inte hur den fungerar, tillexempel att man skriver $string = "Hej"; och inte $string="Hej"; det kan också vara 
    att man använder camelcase och inte snakecase etc. Kan också vara en klass per fil och inte för många metoder i en klass.
</p>
<p>
    Coverage - är hur mycekt av koden som täcks av tester så är det 50% coverage så täck 50% av koden av tester. Man vill ha en hög procent coverage.
</p>
<p>
    Complexity - är hur många olika vägar koden kan ta så en if-sats är 1 i complexity sedan för varje else if blir complexity en till. Man vill 
    ha så låg complexity som möjligt, då hög complexity gör koden svår att förstå och testa.
</p>
<p>
    Cohesion - är hur väl relaterade ansvarsområdet för en klass har, man vill ha en hög cohesion då klassen blir lätt att förstå men också lätt att testa.
    Medans låg cohesion gör att koden blir svår att testa och svårt att återanvända.
</p>
<p>
    Coupling - är ett värde på hur beroende två klasser är av varanda, man vill ha så låg coupling som det går då det minimerar risken för att man ändrar i 
    klass a och förstör då klass b. Det gör också koden mer flexibel och lättare att testa.
</p>
<p>
    CRAP - är ett mått på hur "farligt" det är att ändra i den metoden, det räknas ut på följande sätt CRAP = (CC² × (1 - coverage%)³) + CC där: CC = Cyclomatic 
    Complexity (antal möjliga vägar genom koden), coverage% = hur mycket av funktionen är testad.
</p>

<h2>PHPMetrics</h2>
<img src="{{ asset('img/PHPMetrics.png') }}" alt="PHP Metrics">
<p>
    Jag tycker att de flesta av mina mätvärden är bra, men jag ser i dessa blobbar att jag har lite och jobba med i vissa filer (mest controllers). Jag vill få ner de stora röda 
    blobbarna, min tanke är att jobba mycket med Coupling, Complexity och Cohesion då jag kan se att de är de värderna som sticker ut lite. Så jag tror att om jag fixar till främst 
    cohesion så kommer jag få ner dessa blobbar mycker. När jag analyser LCOM så ser jag att de som har högst tal där är de med störst röda blobbar.
</p>
<img src="{{ asset('img/PHPMetricsVal.png') }}" alt="PHP Metrics Values" style="width: 800px;">


<h2>Scrutinizer</h2>
<img src="{{ asset('https://scrutinizer-ci.com/g/21mmslak/mvcV1/badges/quality-score.png?b=main') }}" alt="Badges">
<img src="{{ asset('https://scrutinizer-ci.com/g/21mmslak/mvcV1/badges/coverage.png?b=main') }}" alt="Badges">
<img src="{{ asset('https://scrutinizer-ci.com/g/21mmslak/mvcV1/badges/build.png?b=main') }}" alt="Badges">
<img src="{{ asset('https://scrutinizer-ci.com/g/21mmslak/mvcV1/badges/code-intelligence.svg?b=main') }}" alt="Badges">
<p>
    Jag tycker att de flesta av mina mätvärden är väldigt bra, det som jag har längre i är coverage då jag bara gjort tester för blackjack, card och lite controller 
    så om jag fortsätter att göra lite tester för dice så kommer den gå upp snabbt. Det jag ska jobba med för att förbättra min kod är coverage, complexity och cohesion 
    fixar jag till dessa värden tror jag att min kod kommer bli mycket bättre. Jag kan se att vissa klasser har lite för hög complexity se bild.
</p>
<img src="{{ asset('img/scrutinizerVal.png') }}" alt="Scrutinizer Values" style="width: 800px;">


<h2>Förbättringar</h2>
<p>
    De förbättringar jag har tänkt att göra som jag tror kommer göra mest skillnad för min kod är att öka coverage då jag tycker att 52% är lite lågt. Jag kommer sedan att 
    försöka förbättra LCOM då jag tror att det verkligen kommer att hjälpa till med att få ner mängden stora röda bubblor. Sedan tänker jag att jag ska försöka förbättra 
    complexity så gott jag kan. Om jag fixar till alla dessa tre bitar tror jag att min kod kommer bli väldigt mycekt bättre och lättare att sätta sig in i och mer buggfri. 
</p>
<p>
    De nya mätvärderna är lite bättre än det tidigare, jag har mycket "skärp kod" kvar från tex dice som ställer till det lite med värderna. Jag valde att fokusera som sagt 
    på blackjack då det är där jag hade "sämst" kod med hög complexity med 16 i min controller klass. I scrutinizer så är de nya mätvärderna typ lika som innan jag hade 
    väligt bra värden där innan så jag la mer fokus på att förbättra koden i metrics istället. Jag skulle säga att resultet speglar kanske inte rikitgit jobbet jag gjort 
    men jag vet att de stora förändringar jag gjort har gjort att koden blir mycket lättare att underhålla och förstå sig på och testa.
</p>

<h3>BlackJackController</h3>
<table border="1" cellspacing="0" cellpadding="5">
  <thead>
    <tr>
      <th>Värde</th>
      <th>Gamla</th>
      <th>Nya</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Cyclomatic Complexity</td>
      <td>16</td>
      <td>7</td>
    </tr>
    <tr>
      <td>Maintainability Index</td>
      <td>28.6</td>
      <td>60.2</td>
    </tr>
    <tr>
      <td>Complexity</td>
      <td>25</td>
      <td>15</td>
    </tr>
  </tbody>
</table>

<h3>Scrutinizer</h3>
<table border="1" cellspacing="0" cellpadding="5">
  <thead>
    <tr>
      <th></th>
      <th>Gamla</th>
      <th>Nya</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Code value</td>
      <td>10</td>
      <td>10</td>
    </tr>
    <tr>
      <td>Coverage</td>
      <td>52</td>
      <td>51</td>
    </tr>
    <tr>
      <td>Build</td>
      <td>Passed</td>
      <td>Passed</td>
    </tr>
  </tbody>
</table>
<p>Coverage är egentligen bättre jag tog bort min tester för BlackJackController så där av blev coverage lite lägre. Det som inte är testat nu är 
controller klasserna och lite annan skärpkod.</p>
<p>Jag gjrode så att jag skapde fler filer som då inte har gamla mätvärden. Men det gjorde att BlackJackController blev såååå mycket bättre både 
i ett kod perspektiv men mest ur ett lätt läsligt perspektiv.</p>
<img src="{{ asset('img/nyaVarden.png') }}" alt="PHP Metrics">
<p>Lite fler gröna bublbor och lite mindre stora röda, några av de stora röda är "skärpkod" som hänger kvar.</p>

<h2>Diskussion</h2>
<p>
    Jag tycker att det kanske inte är opptimat att göra dessa förbättringar i efterhand ur ett perspektiv då jag ofta upplevde att man skrev bra kod i en ny fil 
    och då behövde fixa bättre kod i en annan fil, jag kännde bara för att börja om från noll och skriva allt på nytt. MEN andra sidan så har jag lärt mig sjuuuukt mycket 
    tror det här var ett av de mest givande kmom i programmet. Om man alltid bara skriver sin kod och aldrig kolalr hur bra den är så kommer man aldrig skriva bättre kod,
     så ur det perspektivet så är det grymt att jobba på det sätter. Men det tar jätte mycket tid att först skriva kod sedan behöva ändra en massa men man lär sig sjukt mycket av det.
</p>
<p>
    Det sätt jag ser att man kan jobba med clean code är att för varje ny fil man gör så kollar man hur det blir med tex Scrutinizer eller PHPMetrics och ändrar direkt. Jag känner dock 
    nu att jag fått mycekt bättre koll på de 6c som jag nu alltid kommer ha i bakhuvet när jag skriver kod, jag tror att om man tänker på det direkt så kanske det tar lite längre tid 
    att skriva koden men i det långa loppet kommer du spara tid när du ska fixa buggar etc.
</p>


{% endblock %}